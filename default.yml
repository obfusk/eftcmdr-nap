<%                                                              # {{{1
  require 'json'

  q           = -> { puts 'press return ...'; $stdin.readline }

  appdir_for  = -> app { "#{Dir.home}/#{app}/app" }

  perms_file  = file.sub(/\.yml\z/, '.perms')
  apps_file   = file.sub(/\.yml\z/, '.apps')

  perms       = File.exists?(perms_file) ?
                  File.read(perms_file).split : []
  apps        = File.exists?(apps_file) ?
                  File.read(apps_file).split : []
  logs        = Hash[apps.map do |x|
    [x, Hash[%x[ nap log #{x} assoc ].lines
          .map { |l| l.chomp.split /\s+/, 2 }]]
  end]
%>                                                              # }}}1

&_menu

menu:                   menu_apps
title:                  apps
text:                   Choose an app
choices:

<% apps.each_with_index do |x,i| %>
- tag:  <%= x.to_json %>
  text: <%= x.to_json %>
  then:
    eval:               eval_menu_apps
    code: |
      app     = ctx[:menu_apps][:tag]
      appdir  = appdir_for[app]
    then: &_menu_commands_<%= i %>

      _stat_<%= i %>: &_stat_<%= i %>                           # {{{1
        tag:            stat
        text:           app status
        then:
          eval:         eval_nap_status
          code: |
            osh! 'nap status "$1"', app; q[]
          then: *_menu_commands_<%= i %>
                                                                # }}}1

      _info_<%= i %>: &_info_<%= i %>                           # {{{1
        tag:            info
        text:           app info
        then:
          eval:         eval_nap_info
          code: |
            osh! 'nap info "$1"', app; q[]
          then: *_menu_commands_<%= i %>
                                                                # }}}1

      _logs_<%= i %>: &_logs_<%= i %>                           # {{{1
        tag:            log
        text:           view log files
        then:
          menu:         menu_logs
          title:        log files
          text: <%= "Choose a log file to view for app #{x}".to_json %>
          choices:
          <% logs[x].each_pair do |n,f| %>
            - tag:      <%= n.to_json %>
              text:     <%= f.to_json %>
              then:
                eval:   eval_logfile
                code: |
                  logfile = logs[app][ctx[:menu_logs][:tag]]
                then:
                  ask:      ask_lines
                  text:     How many lines?
                  default:  100
                  validate: \A\d+\z
                  then:
                    eval:   eval_view_log
                    code: |
                      trap('INT') { ohai 'bye' }
                      r = osh 'tail -f -n "$1" "$2"', ctx[:ask_lines], logfile
                      s = r.status.termsig
                      s && Signal.list.key(s) == 'INT' or raise 'tail failed'
                    then: *_menu_commands_<%= i %>
                  cancel: *_logs_<%= i %>
          <% end %>
          cancel: *_menu_commands_<%= i %>
                                                                # }}}1

      _hist_<%= i %>: &_hist_<%= i %>                           # {{{1
        tag:            hist
        text:           git history
        then:
          ask:          ask_commits
          text:         How many commits?
          default:      100
          validate:     \A\d+\z
          then:
            eval:       eval_nap_hist
            code: |
              osh! 'PAGER= nap log "$1" hist "$2" -v',
                app, ctx[:ask_commits]; q[]
            then: *_menu_commands_<%= i %>
          cancel: *_menu_commands_<%= i %>
                                                                # }}}1

      _console_<%= i %>: &_console_<%= i %>                     # {{{1
        tag:            console
        text:           rails console
        then:
          eval:         eval_rails_console
          code: |
            osh! 'RAILS_ENV=production bundle exec rails c', chdir: appdir
          then: *_menu_commands_<%= i %>
                                                                # }}}1

      _psql_<%= i %>: &_psql_<%= i %>                           # {{{1
        tag:            psql
        text:           postgresql console
        then:
          eval:         eval_psql
          code: |
            osh! 'psql -h localhost -U "$1" "$1"', app, chdir: appdir
          then: *_menu_commands_<%= i %>
                                                                # }}}1

      _start_<%= i %>: &_start_<%= i %>                         # {{{1
        tag:            start
        text:           start app
        then:
          eval:         eval_nap_start
          code: |
            osh! 'nap start "$1"', app; q[]
          then: *_menu_commands_<%= i %>
                                                                # }}}1

      _stop_<%= i %>: &_stop_<%= i %>                           # {{{1
        tag:            stop
        text:           stop app
        then:
          eval:         eval_nap_stop
          code: |
            osh! 'nap stop "$1"', app; q[]
          then: *_menu_commands_<%= i %>
                                                                # }}}1

      _reset_<%= i %>: &_reset_<%= i %>                         # {{{1
        tag:            reset
        text:           git hard reset
        then:
          show_text:    show_text_git_status
          scroll:       true
          code: |
            oshc!('pwd; git fetch --all; git status',
              merge: true, exit: true, chdir: appdir).stdout
          then:
            ask_yesno:  ask_yesno_git_reset
            text:       Are you sure?
            then:
              eval:     eval_git_reset
              code: |
                osh! 'git reset --hard', chdir: appdir
              then: *_menu_commands_<%= i %>
            else:
              eval:     eval_git_reset_cancelled
              code: |
                ohai 'git reset cancelled'
              then: *_menu_commands_<%= i %>
                                                                # }}}1

      menu:             menu_commands
      title:            commands
      text: <%= "Choose a command to run for app #{x}".to_json %>
      choices:
      - *_stat_<%= i %>
      - *_info_<%= i %>
      - *_logs_<%= i %>
      - *_hist_<%= i %>
    <% if (perms & %w{ admin start_stop }).any? %>
      - *_start_<%= i %>
      - *_stop_<%= i %>
    <% end %>
    <% if (perms & %w{ admin }).any? %>
      - *_console_<%= i %>
      - *_psql_<%= i %>
      - *_reset_<%= i %>
    <% end %>
      cancel: *_menu

<% end %>
